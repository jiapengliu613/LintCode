// O(n * k) Solution, using hashheap can optimize to O(nlog(k)), and using deque can reduce to O(n)
public class Solution {
    /**
     * @param nums: A list of integers.
     * @return: The maximum number inside the window at each moving.
     */
    public ArrayList<Integer> maxSlidingWindow(int[] nums, int k) {
        // write your code here
        if (nums == null || nums.length == 0 || k == 0 || k > nums.length) {
            return new ArrayList<Integer>();
        }
        int n = nums.length;
        ArrayList<Integer> result = new ArrayList<>();
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());
        for (int i = 0; i < n; i++) {
            pq.add(nums[i]);
            if (i >= k - 1) {
                result.add(pq.peek());
                pq.remove(nums[i - k + 1]);
            }
            
        }
        return result;
    }
}
// O(n) solution
public class Solution {
    /**
     * @param nums: A list of integers.
     * @return: The maximum number inside the window at each moving.
     */
    public ArrayList<Integer> maxSlidingWindow(int[] nums, int k) {
        // write your code here
        if (nums == null || nums.length == 0 || k == 0 || k > nums.length) {
            return new ArrayList<Integer>();
        }
        int n = nums.length;
        ArrayList<Integer> result = new ArrayList<>();
        Deque<Integer> deque = new ArrayDeque<Integer>();
        
        for (int i = 0; i < n; i++) {
            while (!deque.isEmpty() && deque.peekLast() < nums[i]) {
                deque.removeLast();
            }
            deque.addLast(nums[i]);
            if (i >= k - 1) {
                result.add(deque.peekFirst());
                if (nums[i - k + 1] == deque.peekFirst()) {
                    deque.removeFirst();
                }
            }
        }
        return result;
    }
}
